tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-host-pool-plugin
  - imports/kubernetes.yaml

inputs:

  agent_user:
    description: >
      User for connecting to agent VMs
    default: centos

  hostpool_svc_endpoint:
    type: string
    description: The hostpool service endpoint, like http://10.10.0.90:8080.

  ks_node_dep_archive:
    default: https://github.com/cloudify-incubator/kubernetes-node-blueprints/archive/master.zip

  ks_load_dep_archive:
    default: https://github.com/cloudify-incubator/kubernetes-lb-blueprints/archive/master.zip

  dashboard_ip:
    default: { get_attribute: [ k8s_master_host, ip ] }

dsl_definitions:

  _: &agent_installer
    install:
      implementation: agent.worker_installer.tasks.install
      inputs:
        cloudify_agent: &agent_config
          user: { get_attribute: [SELF, agent_config, user] }
          key: { get_attribute: [SELF, agent_config, key] }
          port: { get_attribute: [SELF, agent_config, port] }
    start:
      implementation: agent.worker_installer.tasks.start
      inputs:
        cloudify_agent: *agent_config
    stop:
      implementation: agent.worker_installer.tasks.stop
      inputs:
        cloudify_agent: *agent_config
    uninstall:
      implementation: agent.worker_installer.tasks.uninstall
      inputs:
        cloudify_agent: *agent_config
    restart:
      implementation: agent.worker_installer.tasks.restart
      inputs:
        cloudify_agent: *agent_config

node_templates:

  k8s_master_host:
    type: cloudify.hostpool.nodes.LinuxHost
    properties:
      agent_config:
        user: { get_input: agent_user }
        install_method: remote
        port: 22
        key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            service_url: { get_input: hostpool_svc_endpoint }
        delete:
          inputs:
            service_url: { get_input: hostpool_svc_endpoint }
      cloudify.interfaces.worker_installer: *agent_installer

  k8s_node:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_node_blue
          blueprint_archive: { get_input: ks_node_dep_archive }
          main_file_name: hostpool.yaml
        deployment:
          id: k8s_node_dep
          inputs:
            public_master_ip: { get_attribute: [ k8s_master_host, ip ] }
            agent_user: { get_input: agent_user }
            hostpool_svc_endpoint: { get_input: hostpool_svc_endpoint }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type
    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  k8s_load:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_lb_blue
          blueprint_archive: { get_input: ks_load_dep_archive }
          main_file_name: hostpool.yaml
        deployment:
          id: k8s_lb_dep
          inputs:
            agent_user: { get_input: agent_user }
            hostpool_svc_endpoint: { get_input: hostpool_svc_endpoint }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type
    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: k8s_node
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
